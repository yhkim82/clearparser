#summary Dependency parser: guidelines

*Clear dependency parser* gives an option of choosing between two transition-based dependency parsing algorithms, shift-eager algorithm and shift-pop algorithm (default). The parser also gives options of customizing feature templates and choosing different learning algorithms (RRM and Liblinear). Clear dependency parser has been used in several organizations such as CLEAR, J.D. Power & Association, and Mayo Clinic.

== Training ==

{{{
java clear.engine.DepTrain -c <configuration file> -t <feature template file> -i <train file> -m <model file> [-n <bootstrapping level>]
java -XX:+UseConcMarkSweepGC -Xmx4g clear.engine.DepTrain -c config/config_dep_en.xml -t config/feature_dep_en_conll09.xml -i dat/sample.dep -m dat/sample.mod
}}}

 * <*configuration file*>: name of a file specifying [ConfigGuidelines configurations] ([http://code.google.com/p/clearparser/source/browse/trunk/config/config_dep_en.xml config/config_dep_en.xml])
 * <*feature template file*>: name of a file containing [FeatureGuidelines feature templates] ([http://code.google.com/p/clearparser/source/browse/trunk/config/feature_dep_en_conll09.xml config/feature_dep_en_conll09.xml]).
 * <*train file*>: name of a file containing dependency trees in [DataFormat dep] format ([http://code.google.com/p/clearparser/source/browse/trunk/dat/sample.dep dat/sample.dep]) for training.
 * <*model file*>: name of a file to contain a trained model.
 * <*bootstrapping level*>: number of iterations for bootstrapping (default = 2)

After running the command, it will generate _n+1_ models, where _n_ is the bootstrapping level: <model file> is a model trained without using bootstrapping and <model file>.boot_n is a model generated from the _n_'th level of bootstrapping.  See Choi & Palmer (2011a) for more details about the bootstrapping.

== Decoding ==

{{{
java clear.engine.DepPredict -c <configuration file> -m <model file> -i <input file> -o <output file>
java -XX:+UseConcMarkSweepGC -Xmx6g clear.engine.DepPredict -c config/config_dep_en.xml -m dat/sample.mod -i dat/sample.dep -o dat/sample.out
}}}

 * <*configuration file*>: name of a file specifying [ConfigGuidelines configurations] ([http://code.google.com/p/clearparser/source/browse/trunk/config/config_dep_en.xml config/config_dep_en.xml])
 * <*model file*>: name of a file containing a trained model.  Pre-trained models can be downloaded from the [TrainedModels this] page.
 * <*input file*>: name of a file containing dependency trees in either [DataFormat raw, pos, dep, or conll-x] format for decoding.
 * <*output file*>: name of a file containing system dependency trees in [DataFormat dep] format ([http://code.google.com/p/clearparser/source/browse/trunk/dat/sample.dep dat/sample.dep]).

If use our pre-trained models, we encourage you to use the corresponding part-of-speech tagging models as well, generated by the OpenNLP part-of-speech tagger integrated in ClearParser.  The part-of-speech model can be specified in the configuration file ([http://code.google.com/p/clearparser/source/browse/trunk/config/config_dep_en.xml config/config_dep_en.xml]).

== Evaluating ==

{{{
java clear.engine.DepEvaluate -g <gold-standard file> -s <system file>
java clear.engine.DepEvaluate -g dat/sample.dep -s dat/sample.out
}}}

 * <*gold-standard file*>: name of a file containing gold-standard dependency trees in [DataFormat dep] format.
 * <*system file*>: name of a file containing system dependency trees in [DataFormat dep] format.

 * Micro = (# of correctly classified dependencies) / (total # of dependencies)
 * Macro = (sum of Micro(tree_i) for all i) / (total # of trees)